1.8.1 ----------------------------------------------------------------------------------
- RAM on small devices is precious, and fragmentation is really a problem. wrench's
  hash tables are bad for this becuase they are very flat, grow-on-collide. So I added
  a 'linear retry' semantic of size (mod / 8) which will attempt to find empty entries
  NEAR a collision. This has dramatically reduced ram use and fragmentation on modest
  size tables, at the cost of the occasional iteration on hit. The only real penalty is
  felt on a miss, and it's not large.
- Initial addition of an arduino library

1.8.0 ----------------------------------------------------------------------------------
- fixed value-to-array semantics for asInt() and asFloat()
- removed c++ constructor/destructor semantics from interpretrer, this saves a
  few cycles and at the same time allows large chunks of memory to be allocated
  simultaneously so should reduce RAM usage a bit too

1.7.1 ----------------------------------------------------------------------------------
- reduced memory footprint a tad by shrinking data types in WRState
- fixed some compiler warnings from newer compilers
- fixed major bug in not preserving return values correctly
- removed "create globals" instruction in favor of always-init to save space
- allocate context and globals all in one go and removing constructor/destructor
  this should save a teeny bit of overhead and code space

1.7.0 -------------------------------------------------------------------------
- removed WRENCH_JUMPTABLE_INTERPRETER from top-level, really not a user-visible
  thing
- added switch, linear and arbitrary flavors
- added WRENCH_REALLY_COMPACT to allow small-but-almost-full-speed WRENCH_COMPACT

1.6.0 -------------------------------------------------------------------------
- fixed error in compare logic surrounding GE/LE/GT/LT in keyhole optimizer

10/26/22 1.5.0 -------------------------------------------------------------------------
- added goto. sometimes it's just the right solution
- added optimized int/float to string so no more dependency on std/sprintf
- added optimized sprintf for string library
- added gc_pause( counts )  to pause the garbage collector 'x' counts when a large
  number of allocations is about to happen. The gc is hyper-aggressive which works
  great for small-memory embedded systems but slows down larger allocations
- fixed parsing of \0 -style escape sequences in single and double-quotes
- added struct array initting
- tranlate "null" into 0 wherever it is encountered
- added "compact" flag which will trade unrolled speed for very compact code,
  reduces compiler-only build to 21k on arduino, now it fits into everything!

10/15/22 1.4.0 -------------------------------------------------------------------------
- removed unnused opcode
- fixed struct/param bug
- broke out a few other .h files
fixing: 
- #2 Can't build due to possibly uninitialized value
- #3 ISO C++ 17 does not allow register storage class specifier
- objs_linux/ dir not part of repo by default
- fixed failure to recognize missing semicolon parse error
- added Hash tables, initted with { k:v, k:v }
- added enums, they are free to the interpreter just cost some compiling overhead
- added single char recognition with ''
- adding string lib
- adding io lib
- partial-code execution removed

10/6/22 1.3.0 -------------------------------------------------------------------------
- added more compare optimizations
- changed function calling to be lower overhead by making "no return" the default,
  so now instead of always returning and then cancelling the return, the return
  value is ignored unless it's actually going to be used
  arduino compiles the interpreter (sans compiler) to 41k
- added array initialization
- added structures
- added "new" instances
- added inline initialization
- added optimized LL/GG/LG/GL loading for uncoimmon binary operations without 
  blowing the opcodes up the way add/sub/mul/div did. Those can be back-converted 
  if necessary
- optimized gc passes
- added ._count meta

9/27/22 1.2.1 ---------------------------------------------------------------------------
- added 0b prefix for parsing binary numbers
- added catch for two label/literals in a row 
- changed the 6x6 arrays to 4x4 so the operands could be left-shifted instead of
  multiplied. This shows measureable gains on the embedded systems, no change to
  Intel and a slight loss on Ryzen
- added 16-bit loads for integers and indexes, reduces bytecode size considerably
- added super-instructions for binary operation + store so it never touches stack
  pretty big speed boost on all platforms
- require 1 less stack ewntry (from 3 to 2) to call a function
- added optimized inc/dec functions for faster [typical] for loops
- added optimized compareL/G instructions for common (x < 0) -ish cases
- optimized if conditionals more with a compare/jump combination instruction

9/11/22 1.2.0 -------------------------------------------------------------------
- removed need for context ID and just track the object directly
- added function to call a pre-indexed function

9/8/22 1.1.0 -------------------------------------------------------------------
- added jumptable interpreter
- added some "super" opcodes for more compressed bytecode:
   O_LiteralInt8ToGlobal
   O_LiteralInt32ToLocal
   O_LiteralInt8ToLocal
   O_LiteralFloatToGlobal
   O_LiteralFloatToLocal
   O_LiteralInt32ToGlobal
