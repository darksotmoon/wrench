2.11
- 

2.10 ----------------------------------------------------------------------------------
- Improving Arduino support
- Adding Esp32 support
- Updated the win32 build to VS2022
- separated the wr_run function into it's two parts: allocating the script
  then initializing it by running "function 0" with:
     // wr_run actually calls these two functions back-to back. If you want
     // to separate the process you can call them on your own.
     // !!!! WARNING: If wr_executeFunctionZero() FAILS you must destroy
     // the context with wr_destroyContext() !!!!!!
     WRContext* wr_allocateNewScript( WRState* w, const unsigned char* block, const int blockSize );
     bool wr_executeFunctionZero( WRState* w, WRContext* context );
- Fixed null switch-body crash (who does that? well.. if you comment them ALL out...)
- Rewrote switch to properly handle local space, major bug that it wasn't before. This
  Represents a difference in the way the switch VM functions but actually _is_ reverse compatible,
  ...almost... the (Switch) case has a (uint16_t) cast which prevents it from functioning, so
  I do need to bump the major version darnit. 


2.09 ----------------------------------------------------------------------------------
- removed 'const' from a few return types Arduino 2.x complained about
- fixed compiler error around indexing arrays with variables (oof)
- fixed "asString" for user-data arrays to be less stupid finding the values
- added enum types supported by c++11 for ease of debugging but made sure
  it is still fully compile-able under c++98

2.08 ----------------------------------------------------------------------------------
- added more debugging tools
- added WRENCH_FLOAT_SPRINTF to grant full floating-point format support to str::sprintf
- removed leading '0' from wrench version macro

2.07 ----------------------------------------------------------------------------------
- fixed order-of-operations problem with global/local division and subtraction

2.06 ----------------------------------------------------------------------------------
- bugfixes

2.05 ----------------------------------------------------------------------------------
- small gc optimization
- fixed issue #9 with the optimizer

2.04 ----------------------------------------------------------------------------------
- Adding CallLibFunctionAndPop since it's coming up a lot (appended so major version same)
- fixed corner case where iterators did not hold references to their arrays so they
  could be gc'ed while being iterated! hard to induce this case, you have to do
  something silly like erasing the array while iterating but now it will just
  be sill instead of segfaulting :)
- Added string operation for constructing strings to call into wrench with

2.03 ----------------------------------------------------------------------------------
- added .isFloat() and .isInt() to WRValue
- fixed some array-centered pre/post inc/dec corners
- wrench now understands "userdata.b" to be equivilant to "userdata.b[0]" for the
  purposes of a raw array and wr_addArrayToContainer(...)
- fixed some raw array compares
- fixed small leak with re-opening multiple contexts, the fix
- added std_msg a messaging lib for sending/receiving messages across contexts
  a message is a key/value where the key can be anything but the value is only stored
  numerically, if a complex type is given the hash will be stored, the implications for
  passing allocated memory around is just too whacky

 	msg::read  -- read a message, optionally clear
	msg::write -- write a message
	msg::clear -- clear
	msg::peek -- returns true if a message exists

  load this with wr_loadMessageLib(...) and it is included with wr_loadAllLibs(...)

2.02 ----------------------------------------------------------------------------------
- added bounds checking for raw arrays
- fixed RAW_ARRAY access from c-side value lib
- fixed error where "negate" operation changed the target value permemantly
- added more RAW_ARRAY support

2.01 ----------------------------------------------------------------------------------
- fixed nasty optimization bug around not forgetting opcodes deep enough

2.00 ----------------------------------------------------------------------------------
- wrench bytecode now expects a 32-bit CRC footer, this bytecode is checksummed before 
  run to prevent crashes by bad/garbage data
- wr_run now requires a size, so it can locate the CRC at the end and check the bytecode
- found a bunch of space optimizations, knocked almost 3k off the flash size!
- added (int) and (float) casting operators

1.82 ----------------------------------------------------------------------------------
- changing release format to y.xx instead of y.x.z

1.8.1 ----------------------------------------------------------------------------------
- RAM on small devices is precious, and fragmentation is really a problem. wrench's
  hash tables are bad for this becuase they are very flat, grow-on-collide. So I added
  a 'linear retry' semantic of size (mod / 8) which will attempt to find empty entries
  NEAR a collision. This has dramatically reduced ram use and fragmentation on modest
  size tables, at the cost of the occasional iteration on hit. The only real penalty is
  felt on a miss, and it's not large.
- Initial addition of an arduino library

1.8.0 ----------------------------------------------------------------------------------
- fixed value-to-array semantics for asInt() and asFloat()
- removed c++ constructor/destructor semantics from interpretrer, this saves a
  few cycles and at the same time allows large chunks of memory to be allocated
  simultaneously so should reduce RAM usage a bit too

1.7.1 ----------------------------------------------------------------------------------
- reduced memory footprint a tad by shrinking data types in WRState
- fixed some compiler warnings from newer compilers
- fixed major bug in not preserving return values correctly
- removed "create globals" instruction in favor of always-init to save space
- allocate context and globals all in one go and removing constructor/destructor
  this should save a teeny bit of overhead and code space

1.7.0 -------------------------------------------------------------------------
- removed WRENCH_JUMPTABLE_INTERPRETER from top-level, really not a user-visible
  thing
- added switch, linear and arbitrary flavors
- added WRENCH_REALLY_COMPACT to allow small-but-almost-full-speed WRENCH_COMPACT

1.6.0 -------------------------------------------------------------------------
- fixed error in compare logic surrounding GE/LE/GT/LT in keyhole optimizer

10/26/22 1.5.0 -------------------------------------------------------------------------
- added goto. sometimes it's just the right solution
- added optimized int/float to string so no more dependency on std/sprintf
- added optimized sprintf for string library
- added gc_pause( counts )  to pause the garbage collector 'x' counts when a large
  number of allocations is about to happen. The gc is hyper-aggressive which works
  great for small-memory embedded systems but slows down larger allocations
- fixed parsing of \0 -style escape sequences in single and double-quotes
- added struct array initting
- tranlate "null" into 0 wherever it is encountered
- added "compact" flag which will trade unrolled speed for very compact code,
  reduces compiler-only build to 21k on arduino, now it fits into everything!

10/15/22 1.4.0 -------------------------------------------------------------------------
- removed unnused opcode
- fixed struct/param bug
- broke out a few other .h files
fixing: 
- #2 Can't build due to possibly uninitialized value
- #3 ISO C++ 17 does not allow register storage class specifier
- objs_linux/ dir not part of repo by default
- fixed failure to recognize missing semicolon parse error
- added Hash tables, initted with { k:v, k:v }
- added enums, they are free to the interpreter just cost some compiling overhead
- added single char recognition with ''
- adding string lib
- adding io lib
- partial-code execution removed

10/6/22 1.3.0 -------------------------------------------------------------------------
- added more compare optimizations
- changed function calling to be lower overhead by making "no return" the default,
  so now instead of always returning and then cancelling the return, the return
  value is ignored unless it's actually going to be used
  arduino compiles the interpreter (sans compiler) to 41k
- added array initialization
- added structures
- added "new" instances
- added inline initialization
- added optimized LL/GG/LG/GL loading for uncoimmon binary operations without 
  blowing the opcodes up the way add/sub/mul/div did. Those can be back-converted 
  if necessary
- optimized gc passes
- added ._count meta

9/27/22 1.2.1 ---------------------------------------------------------------------------
- added 0b prefix for parsing binary numbers
- added catch for two label/literals in a row 
- changed the 6x6 arrays to 4x4 so the operands could be left-shifted instead of
  multiplied. This shows measureable gains on the embedded systems, no change to
  Intel and a slight loss on Ryzen
- added 16-bit loads for integers and indexes, reduces bytecode size considerably
- added super-instructions for binary operation + store so it never touches stack
  pretty big speed boost on all platforms
- require 1 less stack ewntry (from 3 to 2) to call a function
- added optimized inc/dec functions for faster [typical] for loops
- added optimized compareL/G instructions for common (x < 0) -ish cases
- optimized if conditionals more with a compare/jump combination instruction

9/11/22 1.2.0 -------------------------------------------------------------------
- removed need for context ID and just track the object directly
- added function to call a pre-indexed function

9/8/22 1.1.0 -------------------------------------------------------------------
- added jumptable interpreter
- added some "super" opcodes for more compressed bytecode:
   O_LiteralInt8ToGlobal
   O_LiteralInt32ToLocal
   O_LiteralInt8ToLocal
   O_LiteralFloatToGlobal
   O_LiteralFloatToLocal
   O_LiteralInt32ToGlobal
